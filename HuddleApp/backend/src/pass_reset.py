# -*- coding: utf-8 -*-
"""pass_reset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bKB3tt3o6aDXsWxjGwm-bGFywYm033AD
"""

import string
import random
import psycopg2
import psycopg2.extras
from src.error import InputError, AccessError
from src.email import pass_reset_email
from helpers import *
from src.config import *

###############################################################################
###############################################################################
###                                  PASS RESET                             ###
###############################################################################
###############################################################################
def generate_reset_code():
    """
    Generates a reset code (6 character long) at random. Checks that the reset code
    has not been used before and if there are duplicates a new code is generated again
    Also sends an email containing the code to the user

    Return Value:
        Returns reset_code (6 char long string)

    """

    # generating 6 character code of numbers and letters
    chars = string.ascii_lowercase + string.digits
    code = ''.join(random.choice(chars) for i in range(6))

    return code


def request_pass_reset_code(email, tablename):
    """
    Given an email address, if the user is a registered user, sends them an email
    containing a specific secret code, that when entered in auth_passwordreset_reset,
    shows that the user trying to reset the password is the one who got sent this email

    Arguments:
        <email> (<string>)    - user email
        <tablename> (<string>) - user type ie customer, host

    """

    # lowercase email easier search later
    db = psycopg2.connect(dbname=DB_NAME, user=DB_USER, password=DB_PASSWORD, host=DB_HOST, port=DB_POST)
    cur = db.cursor(cursor_factory=psycopg2.extras.DictCursor)

    email = str(email).lower()

    Get_user_SQL = ""
    if (tablename == 'customer'):
        Get_user_SQL = "SELECT * FROM customer WHERE email = %s"
    elif (tablename == 'host'):
        Get_user_SQL = "SELECT * FROM host WHERE email = %s"

    try:
        cur.execute(Get_user_SQL, [email])
        db.commit()

    except(Exception) as error:
        if (db):
            print("Failed find customer:", error)

    DB_Data = cur.fetchone()
    if not DB_Data:
        raise InputError(description="Invalid email")

    if (tablename == 'customer'):
        # finding user first name for email
        name = DB_Data["first_name"]
    elif (tablename == 'host'):
        name = DB_Data["company_name"]

    # generate random code
    code = generate_reset_code()

    # email code to
    pass_reset_email(email, name, code)

    return {
        'reset_code': code
    }


def reset_password_in_db(email, tablename, new_password):
    """
    Given a reset code for a user, set that user's new password to the password provided

        Arguments:
            <new_password> (<string>)    - new password

        Exceptions:
            InputError  - Occurs when
                entered code is not the same as the one sent through email
                new password length is less than 6 characters
                Password is not correct

    """

    db = psycopg2.connect(dbname=DB_NAME, user=DB_USER, password=DB_PASSWORD, host=DB_HOST, port=DB_POST)
    cur = db.cursor(cursor_factory=psycopg2.extras.DictCursor)
    
    update_new_password_SQL = ""
    if (tablename == 'customer'):
        update_new_password_SQL = "UPDATE customer set password = %s WHERE email = %s"
    elif (tablename == 'host'):
        update_new_password_SQL = "UPDATE host set password = %s WHERE email = %s"

    try:
        cur.execute(update_new_password_SQL, [new_password, email])
        db.commit()

    except(Exception) as error:
        if (db):
            print("Failed find user:", error)
    
    return {}
