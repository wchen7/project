# -*- coding: utf-8 -*-
"""email.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NLDzdHXEw5YaqOcNoKQ-lE2PNzbraRH2
"""

from email.message import EmailMessage
import ssl
import smtplib
import string
import psycopg2
import psycopg2.extras
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from src.HTML import pass_reset_html, e_ticket_html, refund_html, reminder_html
from src.event_lookup import uplook_id_event
from src.user import get_customer_profile
from src.error import InputError, AccessError
from src.token import check_token
from src.config import *

CURRENT_EMAIL = ""
CURRENT_USER_TYPE = ""

###############################################
############## DEFINING HELPERS ###############
###############################################


def email_helper(email_receiver, subject, html_content):
  email_sender = "huddle.app.mails@gmail.com"
  email_password = "swyludyakgyvfjry"

  em = MIMEMultipart("alternative")
  em['From'] = email_sender
  em['To'] = email_receiver
  em['subject'] = subject

  # Turn these into plain/html MIMEText objects
  MIME_obj = MIMEText(html_content, "html")

  # Add HTML/plain-text parts to MIMEMultipart message
  # The email client will try to render the last part first
  em.attach(MIME_obj)


  context = ssl.create_default_context()
  port = 465

  with smtplib.SMTP_SSL('smtp.gmail.com', port, context=context) as smtp:
    smtp.login(email_sender, email_password)
    smtp.sendmail(email_sender, email_receiver, em.as_string())


###############################################
############### RESET PASSWORD ################
###############################################

def pass_reset_email(email_receiver, first_name, temp_code):
  subject = "Huddle Account Password Reset"

  html_content = pass_reset_html.format(html_code = temp_code, html_name = first_name)

  email_helper(email_receiver, subject, html_content)

###############################################
############### REFUND BOOKING ################
###############################################

def refund_email(user_id, booking_ref, event_id, payment_info):
  db = psycopg2.connect(dbname=DB_NAME, user=DB_USER, password=DB_PASSWORD, host=DB_HOST, port=DB_POST)
  cur = db.cursor(cursor_factory=psycopg2.extras.DictCursor)
  try:
    Get_user_SQL = "SELECT * FROM customer WHERE id = %s"
    cur.execute(Get_user_SQL, [user_id])
    db.commit()

  except(Exception) as error:
    if (db):
        print("Failed to find customer:", error)
  
  customer_data = cur.fetchone()
  
  if not customer_data:
    raise InputError(description="Invalid user id")

  user_email = customer_data["email"]

  # # Finding booking details from DB
  # try:
  #   Get_booking_SQL = "SELECT * FROM bookings WHERE id = %s"
  #   cur.execute(Get_booking_SQL, [booking_ref])
  #   db.commit()

  # except(Exception) as error:
  #   if (db):
  #       print("Failed to find booking:", error)
  
  # booking_data = cur.fetchone()
  
  # if not booking_data:
  #   raise InputError(description="Invalid booking id")

  event_data = uplook_id_event(event_id)

  try:
    Get_host_SQL = "SELECT * FROM host WHERE id = %s"
    cur.execute(Get_host_SQL, [event_data["host"]])
    db.commit()

  except(Exception) as error:
    if (db):
        print("Failed to find host:", error)

  host_data = cur.fetchone()
  host_name = host_data["company_name"]

  event_date = event_data["start_date"][0:10]
  event_time = event_data["start_date"][11:16]
  # last_4_pay = payment_info[len(payment_info)-4:]

  refund_html_f = refund_html
  for var, val in {"{booking_id}":booking_ref, "{first_name}": customer_data["first_name"], "{event_venue}": event_data["venue"], "{event_title}": event_data["title"], "{event_date}": event_date, "{refund_amount}": str(event_data["price"]), "{event_organiser}": host_name, "{event_time}": event_time}.items():
        refund_html_f = refund_html_f.replace(var, val)
  subject = "Your refund for " + event_data["title"]
  email_helper(user_email, subject, refund_html_f)

  return None

  
###############################################
############### TICKET CONFIRM ################
###############################################

def ticket_email(user_id, booking_ref, event_id, ticket_url, payment_info):
  db = psycopg2.connect(dbname=DB_NAME, user=DB_USER, password=DB_PASSWORD, host=DB_HOST, port=DB_POST)
  cur = db.cursor(cursor_factory=psycopg2.extras.DictCursor)
  try:
    Get_user_SQL = "SELECT * FROM customer WHERE id = %s"
    cur.execute(Get_user_SQL, [user_id])
    db.commit()

  except(Exception) as error:
    if (db):
        print("Failed to find customer:", error)
  
  customer_data = cur.fetchone()
  
  if not customer_data:
    raise InputError(description="Invalid user id")

  user_email = customer_data["email"]

  # Finding booking details from DB
  try:
    Get_booking_SQL = "SELECT * FROM bookings WHERE id = %s"
    cur.execute(Get_booking_SQL, [booking_ref])
    db.commit()

  except(Exception) as error:
    if (db):
        print("Failed to find booking:", error)
  
  booking_data = cur.fetchone()
  
  if not booking_data:
    raise InputError(description="Invalid booking id")

  event_data = uplook_id_event(event_id)

  try:
    Get_host_SQL = "SELECT * FROM host WHERE id = %s"
    cur.execute(Get_host_SQL, [event_data["host"]])
    db.commit()

  except(Exception) as error:
    if (db):
        print("Failed to find host:", error)

  host_data = cur.fetchone()
  host_name = host_data["company_name"]

  event_date = event_data["start_date"][0:10]
  event_time = event_data["start_date"][11:16]
  last_4_pay = payment_info[len(payment_info)-4:]

  e_ticket_html_f = e_ticket_html
  for var, val in {"{ticket_url}":ticket_url, "{booking_id}":booking_ref, "{first_name}": customer_data["first_name"], "{event_venue}": event_data["venue"], "{event_title}": event_data["title"], "{event_date}": event_date, "{ticket_price}": str(event_data["price"]), "{event_organiser}": host_name, "{payment_method}": last_4_pay, "{event_time}": event_time}.items():
        e_ticket_html_f = e_ticket_html_f.replace(var, val)
  subject = "Your ticket for " + event_data["title"]
  email_helper(user_email, subject, e_ticket_html_f)

  return None


###############################################
############### REMINDER EMAIL ################
###############################################

def reminder_email(booking_ref):
  db = psycopg2.connect(dbname=DB_NAME, user=DB_USER, password=DB_PASSWORD, host=DB_HOST, port=DB_POST)
  cur = db.cursor(cursor_factory=psycopg2.extras.DictCursor)
  
  # Finding booking details from DB using booking_ref
  try:
    Get_booking_SQL = "SELECT * FROM bookings WHERE id = %s"
    cur.execute(Get_booking_SQL, [booking_ref])
    db.commit()

  except(Exception) as error:
    if (db):
        print("Failed to find booking:", error)
  
  booking_data = cur.fetchone()
  
  if not booking_data:
    raise InputError(description="Invalid booking id")

  customer_id = booking_data["customer"]

  # Finds user from DB using user_id
  try:
    Get_user_SQL = "SELECT * FROM customer WHERE id = %s"
    cur.execute(Get_user_SQL, [customer_id])
    db.commit()

  except(Exception) as error:
    if (db):
        print("Failed to find customer:", error)
  
  customer_data = cur.fetchone()
  
  if not customer_data:
    raise InputError(description="Invalid user id")

  user_email = customer_data["email"]

  event_data = uplook_id_event(booking_data["event"])

  reminder_html_f = reminder_html
  for var, val in {"{first_name}": customer_data["first_name"], "{event_title}": event_data["title"]}.items():
        reminder_html_f = reminder_html_f.replace(var, val)
  subject = event_data["title"] + "is a week away!"
  email_helper(user_email, subject, reminder_html_f)

  return None